<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FileFlows.ServerShared</name>
    </assembly>
    <members>
        <member name="T:FileFlows.ServerShared.Globals">
            <summary>
            Globals variables
            </summary>
        </member>
        <member name="F:FileFlows.ServerShared.Globals.Version">
            <summary>
            Gets the version of FileFlows
            </summary>
        </member>
        <member name="P:FileFlows.ServerShared.Globals.IsWindows">
            <summary>
            Gets if this is running on Windows
            </summary>
        </member>
        <member name="P:FileFlows.ServerShared.Globals.IsLinux">
            <summary>
            Gets if this is running on linux
            </summary>
        </member>
        <member name="P:FileFlows.ServerShared.Globals.IsMac">
            <summary>
            Gets if this is running on Mac
            </summary>
        </member>
        <member name="P:FileFlows.ServerShared.Globals.IsDocker">
            <summary>
            Gets or sets if this node is running inside a docker container
            </summary>
        </member>
        <member name="T:FileFlows.ServerShared.Helpers.DirectoryHelper">
            <summary>
            A helper class to manage the directories used by FileFlows Server and Node
            </summary>
        </member>
        <member name="P:FileFlows.ServerShared.Helpers.DirectoryHelper.IsDocker">
            <summary>
            Gets if this is a Docker instance or not
            </summary>
        </member>
        <member name="P:FileFlows.ServerShared.Helpers.DirectoryHelper.IsNode">
            <summary>
            Gets if this is a Node or Server
            </summary>
        </member>
        <member name="P:FileFlows.ServerShared.Helpers.DirectoryHelper.BaseDirectory">
            <summary>
            Gets the base directory of FileFlows
            eg %appdata%\FileFlows
            </summary>
        </member>
        <member name="M:FileFlows.ServerShared.Helpers.DirectoryHelper.InitLoggingDirectory">
            <summary>
            Inits the logging directory and moves any files if they need to be moved
            </summary>
        </member>
        <member name="M:FileFlows.ServerShared.Helpers.DirectoryHelper.InitDataDirectory">
            <summary>
            Inits the data directory and moves any files if they need to be moved
            </summary>
        </member>
        <member name="P:FileFlows.ServerShared.Helpers.DirectoryHelper.LoggingDirectory">
            <summary>
            Gets the logging directory
            </summary>
        </member>
        <member name="P:FileFlows.ServerShared.Helpers.DirectoryHelper.LibraryFilesLoggingDirectory">
            <summary>
            Gets the directory where library file logs are stored 
            </summary>
        </member>
        <member name="P:FileFlows.ServerShared.Helpers.DirectoryHelper.DataDirectory">
            <summary>
            Gets the data directory
            </summary>
        </member>
        <member name="P:FileFlows.ServerShared.Helpers.DirectoryHelper.DatabaseDirectory">
            <summary>
            Gets the directory the database is saved in
            </summary>
        </member>
        <member name="P:FileFlows.ServerShared.Helpers.DirectoryHelper.FlowRunnerDirectory">
            <summary>
            Gets the flow runner directory
            </summary>
        </member>
        <member name="P:FileFlows.ServerShared.Helpers.DirectoryHelper.PluginsDirectory">
            <summary>
            Gets the logging directory
            </summary>
        </member>
        <member name="P:FileFlows.ServerShared.Helpers.DirectoryHelper.EncryptionKeyFile">
            <summary>
            Gets the location of the encryption key file
            </summary>
        </member>
        <member name="P:FileFlows.ServerShared.Helpers.DirectoryHelper.NodeConfigFile">
            <summary>
            Gets the location of the node configuration file
            </summary>
        </member>
        <member name="M:FileFlows.ServerShared.Helpers.FileHelper.RemoveIllegalCharacters(System.String)">
            <summary>
            Removes illegal file/path characters from a string
            </summary>
            <param name="input">the string to clean</param>
            <returns>the original string with all illegal characters removed</returns>
        </member>
        <member name="M:FileFlows.ServerShared.Helpers.FileHelper.CalculateFingerprint(System.String)">
            <summary>
            Calculates a fingerprint for a file
            </summary>
            <param name="file">The filename</param>
            <returns>The fingerprint</returns>
        </member>
        <member name="T:FileFlows.ServerShared.Helpers.PluginHelper">
            <summary>
            This class will allow hot reloading of an plugin assembly so they can be update
            This class should return nothing from a Plugin assembly and just common C# objects
            </summary>
        </member>
        <member name="M:FileFlows.ServerShared.Helpers.PluginHelper.LoadNode(FileFlows.Shared.Models.FlowPart)">
            <summary>
            This needs to return an instance so the FlowExecutor can use it...
            </summary>
            <param name="part">The flow part</param>
            <returns>an insstance of the plugin node</returns>
        </member>
        <member name="T:FileFlows.ServerShared.Services.IPluginService">
            <summary>
            Plugin Service interface
            </summary>
        </member>
        <member name="M:FileFlows.ServerShared.Services.IPluginService.GetAll">
            <summary>
            Get all plugin infos
            </summary>
            <returns>all plugin infos</returns>
        </member>
        <member name="M:FileFlows.ServerShared.Services.IPluginService.Update(FileFlows.Shared.Models.PluginInfo)">
            <summary>
            Updates plugin info
            </summary>
            <param name="pluginInfo">the plugin info</param>
            <returns>the updated plugininfo</returns>
        </member>
        <member name="M:FileFlows.ServerShared.Services.IPluginService.Download(FileFlows.Shared.Models.PluginInfo)">
            <summary>
            Download a plugin
            </summary>
            <param name="plugin">the plugin to download</param>
            <returns>the byte data of the plugin</returns>
        </member>
        <member name="M:FileFlows.ServerShared.Services.IPluginService.GetSettingsJson(System.String)">
            <summary>
            Gets the settings json for a plugin
            </summary>
            <param name="pluginPackageName">the name of the plugin package</param>
            <returns>the settings json</returns>
        </member>
        <member name="T:FileFlows.ServerShared.Services.PluginService">
            <summary>
            Plugin service
            </summary>
        </member>
        <member name="M:FileFlows.ServerShared.Services.PluginService.Load">
            <summary>
            Loads an instance of the plugin service
            </summary>
            <returns>an instance of the plugin service</returns>
        </member>
        <member name="M:FileFlows.ServerShared.Services.PluginService.Download(FileFlows.Shared.Models.PluginInfo)">
            <summary>
            Download a plugin
            </summary>
            <param name="plugin">the plugin to download</param>
            <returns>the byte data of the plugin</returns>
        </member>
        <member name="M:FileFlows.ServerShared.Services.PluginService.GetAll">
            <summary>
            Get all plugin infos
            </summary>
            <returns>all plugin infos</returns>
        </member>
        <member name="M:FileFlows.ServerShared.Services.PluginService.GetSettingsJson(System.String)">
            <summary>
            Gets the settings json for a plugin
            </summary>
            <param name="pluginPackageName">the name of the plugin package</param>
            <returns>the settings json</returns>
        </member>
        <member name="M:FileFlows.ServerShared.Services.PluginService.Update(FileFlows.Shared.Models.PluginInfo)">
            <summary>
            Updates plugin info
            </summary>
            <param name="pluginInfo">the plugin info</param>
            <returns>the updated plugininfo</returns>
            <exception cref="T:System.NotImplementedException">This not yet implemented</exception>
        </member>
        <member name="T:FileFlows.ServerShared.Services.ISystemService">
            <summary>
            An interface of the System Service
            </summary>
        </member>
        <member name="M:FileFlows.ServerShared.Services.ISystemService.GetVersion">
            <summary>
            Gets the version from the server
            </summary>
            <returns>the server version</returns>
        </member>
        <member name="M:FileFlows.ServerShared.Services.ISystemService.GetNodeUpdater">
            <summary>
            Gets the node updater binary
            </summary>
            <returns>the node updater binary</returns>
        </member>
        <member name="M:FileFlows.ServerShared.Services.ISystemService.GetNodeUpdateIfAvailable(System.String)">
            <summary>
            Gets an node update available
            </summary>
            <param name="version">the current version of the node</param>
            <returns>if there is a node update available, returns the update</returns>
        </member>
        <member name="T:FileFlows.ServerShared.Services.SystemService">
            <summary>
            A System Service
            </summary>
        </member>
        <member name="P:FileFlows.ServerShared.Services.SystemService.Loader">
            <summary>
            Gets or sets the loader for SystemService
            </summary>
        </member>
        <member name="M:FileFlows.ServerShared.Services.SystemService.Load">
            <summary>
            Loads an instance of SystemService
            </summary>
            <returns>an instance of SystemService</returns>
        </member>
        <member name="M:FileFlows.ServerShared.Services.SystemService.GetVersion">
            <summary>
            Gets the version from the server
            </summary>
            <returns>the server version</returns>
        </member>
        <member name="M:FileFlows.ServerShared.Services.SystemService.GetNodeUpdater">
            <summary>
            Gets the node updater binary
            </summary>
            <returns>the node updater binary</returns>
        </member>
        <member name="M:FileFlows.ServerShared.Services.SystemService.GetNodeUpdateIfAvailable(System.String)">
            <summary>
            Gets an node update available
            </summary>
            <param name="version">the current version of the node</param>
            <returns>if there is a node update available, returns the update</returns>
        </member>
        <member name="T:FileFlows.ServerShared.Workers.UpdaterWorker">
            <summary>
            Worker that will automatically update the system
            </summary>
        </member>
        <member name="P:FileFlows.ServerShared.Workers.UpdaterWorker.UpdatePending">
            <summary>
            Gets if there is an updated pending installation
            </summary>
        </member>
        <member name="M:FileFlows.ServerShared.Workers.UpdaterWorker.#ctor(System.String,System.Int32)">
            <summary>
            Constructs an instance of a Update Worker
            </summary>
            <param name="upgradeScriptPrefix">The script to execute in the upgrade zip file</param>
            <param name="minutes">how many minute between checks</param>
        </member>
        <member name="M:FileFlows.ServerShared.Workers.UpdaterWorker.CanUpdate">
            <summary>
            Gets if the update can run
            </summary>
        </member>
        <member name="M:FileFlows.ServerShared.Workers.UpdaterWorker.QuitApplication">
            <summary>
            Quits the current application
            </summary>
        </member>
        <member name="M:FileFlows.ServerShared.Workers.UpdaterWorker.RunCheck">
            <summary>
            Runs a check for update and if found will download it 
            </summary>
            <returns>A update has been downloaded</returns>
        </member>
        <member name="M:FileFlows.ServerShared.Workers.UpdaterWorker.DownloadUpdateBinary">
            <summary>
            Downloads an update
            </summary>
            <returns>The update file</returns>
        </member>
        <member name="M:FileFlows.ServerShared.Workers.UpdaterWorker.GetAutoUpdatesEnabled">
            <summary>
            Gets if auto updates are enabled
            </summary>
            <returns>if auto updates are enabled</returns>
        </member>
    </members>
</doc>
